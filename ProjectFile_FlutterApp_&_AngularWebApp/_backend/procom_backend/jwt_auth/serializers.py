from rest_framework import serializers
from django.contrib.auth.models import User
from rest_framework.validators import UniqueValidator
from .models import MainProfile
from django.core.cache import cache
from logging import getLogger


logger = getLogger(__name__)


class SignupSerializer(serializers.Serializer):
    first_name = serializers.CharField(max_length=100, help_text='max_length=100')
    last_name = serializers.CharField(required=False, allow_blank=True, max_length=100, help_text='max_length=100')
    email = serializers.EmailField(validators=[UniqueValidator(queryset=User.objects.all()), ], help_text='Unique (uniqueness checked by serializer only not by model)')
    mobile = serializers.RegexField(regex=r'[0-9]{10}', max_length=10, min_length=10, validators=[UniqueValidator(queryset=MainProfile.objects.all())], help_text='Unique, max_length=10')
    business_name = serializers.CharField(max_length=200, help_text="max_length=200")
    password = serializers.RegexField(regex=r'[a-zA-Z0-9!@#$%^&*()\{\}\[\]|"\';:<>\.,/\?]+', min_length=8, max_length=50, help_text="min_length=8, max_length=50, (set using PBKDF2)")


class MobileSerializer(serializers.Serializer):
    mobile = serializers.RegexField(regex=r'[0-9]{10}', max_length=10, min_length=10, validators=[UniqueValidator(queryset=MainProfile.objects.all())], help_text='Unique, max_length=10')


class EmailSerializer(serializers.Serializer):
    email = serializers.EmailField(validators=[UniqueValidator(queryset=User.objects.all()), ], help_text='Unique (uniqueness checked by serializer only not by model)')


class ProfileSerializer(serializers.Serializer):
    first_name = serializers.CharField(required=False, max_length=100, help_text='max_length=100')
    last_name = serializers.CharField(required=False, max_length=100, help_text='max_length=100')
    gstin = serializers.RegexField(required=False, regex=r'[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z][0-9][A-Z][0-9]', max_length=20, validators=[UniqueValidator(queryset=MainProfile.objects.all())], help_text='Unique, GSTIN must follow GSTIN Pattern: [0-9]{2}[A-Z]{5}[0-9]{4}[A-Z][0-9][A-Z][0-9]')
    address = serializers.CharField(required=False, max_length=300, help_text="max_length=300")
    business_name = serializers.CharField(required=False,max_length=200, help_text="max_length=200")


class VerifyOTPSerializer(serializers.Serializer):
    id = serializers.RegexField(regex=r'[0-9A-Za-z]{6}', min_length=6, max_length=6, help_text="Unique(by default), max_length=6, Autogenerated username that's returned by auth/signup")
    otp = serializers.RegexField(regex=r'[0-9]{6}', min_length=6, max_length=6, help_text="OTP received on number (also logged in logger)")

    def validate(self, data):
        username = data['id']
        otp = data['otp']

        validated_data = cache.get(f"{username}SIGNUP")
        if validated_data is None:
            raise serializers.ValidationError("otp expired.")
        else:
            if 'otp' in validated_data:
                if validated_data['otp'] != otp:
                    raise serializers.ValidationError("otp did not match.")
            else:
                logger.exception("**MALATTEMPT**")
                raise serializers.ValidationError("MALATTEMPT")
        validated_data['username'] = username
        return validated_data


class ChangePasswordSerializer(serializers.Serializer):
    otp = serializers.RegexField(regex=r'[0-9]{6}', min_length=6, max_length=6, help_text="OTP received on number (also logged in logger)")
    password = serializers.RegexField(regex=r'[a-zA-Z0-9!@#$%^&*()\{\}\[\]|"\';:<>\.,/\?]+', min_length=8, max_length=50, help_text="max_length=50, (set using PBKDF2)")

    def validate(self, data):
        username = self.context['username']
        otp = data['otp']
        change_pass_otp = cache.get(f"{username}CHANGE_PASS_OTP")
        if change_pass_otp is None:
            raise serializers.ValidationError("otp expired.")
        else:
            if change_pass_otp != otp:
                raise serializers.ValidationError("otp did not match.")
            else:
                return data['password']


class ChangeMobileSerializer(serializers.Serializer):
    otp = serializers.RegexField(regex=r'[0-9]{6}', min_length=6, max_length=6, help_text="OTP received on number (also logged in logger)")

    def validate(self, data):
        username = self.context['username']
        otp = data['otp']
        change_mobile_cache = cache.get(f"{username}CHANGE_MOBILE_OTP")
        if change_mobile_cache is None:
            raise serializers.ValidationError("otp expired.")
        else:
            if change_mobile_cache['otp'] != otp:
                raise serializers.ValidationError("otp did not match.")
            else:
                if change_mobile_cache['mobile'] != self.context['mobile']:
                    logger.exception(f"**MALATTEMPT**")
                    raise serializers.ValidationError("MALATTEMPT")
                else:
                    return change_mobile_cache['mobile']


class ChangeEmailSerializer(serializers.Serializer):
    email = serializers.EmailField(required=False, validators=[UniqueValidator(queryset=User.objects.all()), ], help_text='Unique (uniqueness checked by serializer only not by model)')


class SigninSerializer(serializers.Serializer):
    id_field = serializers.CharField(max_length=100)
    password = serializers.CharField(max_length=50)

    def validate(self, data):
        return {'username': data['id_field'], 'password': data['password']}


class RefreshTokenSerializer(serializers.Serializer):
    refresh_token = serializers.CharField(max_length=300)
    token = serializers.CharField(max_length=400)
